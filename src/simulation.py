import os
from OMPython import OMCSessionZMQ, ModelicaSystem
from .file_utils import get_unique_filename

def run_parameter_sweep(package_path: str, model_name: str, param_A_values: dict, param_B_sweep: dict, 
                       stop_time: float, step_size: float, temp_dir: str) -> list:
    """
    Run a double parameter sweep simulation: outer loop for parameter A (fixed values), 
    inner loop for parameter B (swept values).

    Args:
        package_path (str): Path to the Modelica package (.mo file).
        model_name (str): Name of the model to simulate.
        param_A_values (dict): Dictionary with parameter A name and list of values, e.g., {"A_name": [1.0, 1.1, 1.2]}.
        param_B_sweep (dict): Dictionary with parameter B name and sweep values, e.g., {"B_name": np.linspace(1.05, 1.15, 20)}.
        stop_time (float): Simulation stop time.
        step_size (float): Output step size.
        temp_dir (str): Directory for temporary files.

    Returns:
        list: List of paths to temporary CSV files generated by simulations.

    Raises:
        ValueError: If exactly one parameter A and one parameter B are not provided.
    """
    # Ensure exactly one parameter A and one parameter B
    if len(param_A_values) != 1 or len(param_B_sweep) != 1:
        raise ValueError("Exactly one parameter A and one parameter B should be provided.")

    # Create temporary directory and change working directory
    os.makedirs(temp_dir, exist_ok=True)
    os.chdir(temp_dir)

    # Start OpenModelica session
    omc = OMCSessionZMQ()
    omc.sendExpression(f'loadFile("{package_path}")')

    # Create and build model
    mod = ModelicaSystem(fileName=package_path, modelName=model_name)
    mod.buildModel()

    # Get parameter A and B names and values
    param_A_name = list(param_A_values.keys())[0]
    param_A_vals = param_A_values[param_A_name]
    param_B_name = list(param_B_sweep.keys())[0]
    param_B_vals = param_B_sweep[param_B_name]

    # Run simulations: outer loop for parameter A, inner loop for parameter B
    counter = 0
    output_csv_files = []
    for param_A_val in param_A_vals:
        for param_B_val in param_B_vals:
            # Set parameters A and B
            mod.setParameters([f"{param_A_name}={param_A_val}", f"{param_B_name}={param_B_val}"])

            # Set simulation options
            mod.setSimulationOptions([
                f"stopTime={stop_time}",
                "tolerance=1e-6",
                "outputFormat=csv",
                "variableFilter=time|sds\\.I\\[1\\]",
                f"stepSize={step_size}"
            ])

            # Run simulation and save to unique filename
            base_filename = f"simulation_results_{counter}.csv"
            output_csv = get_unique_filename(temp_dir, base_filename)
            mod.simulate(resultfile=output_csv)
            output_csv_files.append(output_csv)
            counter += 1

    # Clean up
    del mod
    del omc

    return output_csv_files